#!/usr/bin/env bash
# Kali Linux additional tools installation script
. helper.sh
. postinstall.sh

install_pentest(){

    if ask "Do you want to install armitage, mimikatz, unicornscan, and zenmap.. ?" Y; then
        print_status "Installing armitage, mimikatz, unicornscan, and zenmap.."
        apt-get -y install armitage mimikatz unicornscan zenmap
        check_success
        print_notification "Newly installed tools should be located on your default PATH."

        #This is a simple git pull of the Cortana .cna script repository available on github.
        print_status "Grabbing Armitage Cortana Scripts via github.."
        git clone http://www.github.com/rsmudge/cortana-scripts.git /opt/cortana
        check_success
        print_notification "Cortana scripts installed under /opt/cortana."
    fi

    if ask "Do you want to install BeEF,arachni,w3af, WATOBO?" Y; then
        apt-get -y install beef-xss arachni w3af watobo
    fi

    if ask "Do you want to install Veil?" Y; then
        apt-get install -y veil cail-catapult veil-evasion
    fi

    if ask  "Do you want to install OWASP tools? (zaproxy,mantra)" Y; then
        apt-get install -y zaproxy owasp-mantra-ff
    fi

    if ask "Do you want to install OWTF?" Y; then
        git clone https://github.com/7a/owtf/ /tmp/owtf
        python /tmp/owtf/install/install.py
    fi

#    if ask "Do you want to install htshells?" Y; then
#        git clone git://github.com/wireghoul/htshells.git /usr/share/htshells/
#    fi

#    if ask "Do you want to install the buffer-overvlow-kit? (requires ruby)" Y; then
#        mkdir ~/develop
#        cd ~/develop
#        git clone https://github.com/KINGSABRI/BufferOverflow-Kit.git
#    fi

    if ask "Do you want to install TOR?" N; then
        apt_add_source "tor"
        #TODO: add check if repo is already added
#        echo "# tor repository" >> /etc/apt/sources.list
#        echo "deb http://deb.torproject.org/torproject.org wheezy main" >> /etc/apt/sources.list

        gpg --keyserver keys.gnupg.net --recv 886DDD89
        gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | sudo apt-key add -
        apt-get update
        apt-get install -y deb.torproject.org-keyring tor tor-geoipdb polipo vidalia privoxy
        mv /etc/polipo/config /etc/polipo/config.orig
        wget https://gitweb.torproject.org/torbrowser.git/blob_plain/ae4aa49ad9100a50eec049d0a419fac63a84d874:/build-scripts/config/polipo.conf -O /etc/polipo/config
        service tor restart
        service polipo restart
        update-rc.d tor enable
        update-rc.d polipo enable
    fi

    if ask "Install SVN version of fuzzdb?" Y; then
        print_status "Installing SVN version of fuzzdb in /usr/share/fuzzdb and keeping it updated."
        if [ -d /usr/share/fuzzdb ]; then
            cd /usr/share/fuzzdb
            svn up
        else
            print_notification "Fuzzdb not found, installing at /usr/share/fuzzdb."
            cd /usr/share
            svn co http://fuzzdb.googlecode.com/svn/trunk fuzzdb
        fi
        print_good "Installed or updated Fuzzdb to /usr/share/fuzzdb."
    fi

#    if ask "Install SVN version of nmap?" N; then
#        print_status "Adding nmap-svn to /opt/nmap-svn."
#        svn co --username guest --password "" https://svn.nmap.org/nmap /opt/nmap-svn
#        cd /opt/nmap-svn
#        ./configure && make
#        /opt/nmap-svn/nmap -V
#        print_good "Installed or updated nmap-svn to /opt/nmap-svn."
#    fi

    #Installing easy-creds.  The needed packages should be taken care of in the extra packages section.
#    if ask "Install easy-creds?" N; then
#        if [ -d /opt/easy-creds ]; then
#            echo "Easy easy-creds install already found."
#        else
#            git clone git://github.com/brav0hax/easy-creds.git /opt/easy-creds
#            ln -s /opt/easy-creds/easy-creds.sh /usr/bin/easy-creds
#        fi
#        updatedb
#        echo -e "If easy-creds was not found it was installed."
#    fi

#    #TODO: add Nessus installation
#    if ask "Install unsploitable?" N; then
#        print_status "Pulling Unsploitable.."
#        mkdir /opt/other-tools
#        cd /opt/other-tools
#        svn checkout svn://svn.code.sf.net/p/unsploitable/code/trunk unsploitable
#        success_check
#        print_notification "Unsploitable installed to /opt/other-tools/unsploitable"
#    fi
#
#    if ask "Pulling DTFTB (Defense Tools for the Blind)?" N; then
#        print_status "The DTFTB scripts are a set of tools that are CTF oriented."
#        svn checkout svn://svn.code.sf.net/p/dtftb/code/trunk dtftb
#        success_check
#        print_notification "DTFTB installed to /opt/other-tools/dtftb"
#    fi
#
#    if ask "Do you want to install stand-alone smbexec tool from brav0hax's github. (180mb of data)" N; then
#        print_status "Pulling SMBexec. It's going to take a bit of time."
#        git clone https://github.com/brav0hax/smbexec.git /opt/other-tools/smbexec-source
#        success_check
#        cd /opt/other-tools/smbexec-source
#
#        #The script has to be ran twice. The first time, the script grabs the prereqs, etc required to compile smbexec
#        print_status "Performing Installation pre-reqs."
#        print_notification "The installation is scripted. When prompted for what OS you are using choose Debian or Ubuntu variant."
#        print_notification "When prompted for where to install smbexec, select /opt/other-tools/smbexec-source"
#        print_notification "Select option 5 to exit, if prompted."
#        read -p "You'll have to run the installer twice. The script immediately bails after installing pre-reqs. Hit enter to continue." pause
#        bash install.sh
#        success_check
#
#        #The second time around, it compiles smbexec, actually installing it.
#        print_status "Re-running installer."
#        print_notification "We have to re-run the installer. The first run verifies you have the right pre-reqs available and installs them."
#        print_notification "This time, select option 4 to compile smbexec."
#        print_notification "Like all good things compiled from source, be patient; this'll take a moment or two."
#        read -p "Select option 5 to exit, post-compile, if prompted. Hit enter to continue" pause
#        bash install.sh
#        success_check
#        print_notification "smbexec should be installed wherever you told the installer script to install it to. That should be /opt/other-tools/smbexec-source"
#    fi
#
#    if ask "Install Kali Lazy?" Y; then
#        #TODO: check if wget installed
#        wget -q http://yourgeekonthego.com/scripts/lazykali/lazykali.sh -O /usr/bin/lazykali
#        chmod +x /usr/bin/lazykali
#        lazykali
#    fi
}

install_mitm(){
    print_notification "Installing MITM tools.."
    apt-get install -y hamster-sidejack ferret-sidejack dsniff snarf ngrep ghost-phisher mitmf

    if ask "Do you want to install Intercepter-NG?" Y; then
        print_notification "Installing dependencies"
        install_32bit
        apt-get install unzip wget lib32ncurses5-dev -y

        print_notification "Download & unpack"
        cd /tmp
        wget http://sniff.su/Intercepter-NG.CE.05.zip
        unzip Intercepter-NG.CE.05.zip
        mv intercepter_linux /usr/bin/intercepter
        chmod +x /usr/bin/intercepter
    fi
}

# Main
if [ "${0##*/}" = "pentest.sh" ]; then
    if ask "Do you want install pentest tools?" Y; then
        install_pentest
    fi

    if ask "Do you want install MITM tools?" Y; then
        install_mitm
    fi
fi

